description: Delete IAM user access keys that have not been used for specified number of weeks
schemaVersion: '0.3'
assumeRole: '{{ AutomationAssumeRole }}'
parameters:
  AutomationAssumeRole:
    type: String
    description: The ARN of the role that allows Automation to perform the actions on your behalf.
    default: ''
  UserName:
    type: String
    description: IAM username whose access keys should be checked
  WeeksThreshold:
    type: String
    description: Delete access keys not used for this many weeks
    default: '13'
mainSteps:
  - name: DeleteOldKeys
    action: aws:executeScript
    isEnd: true
    inputs:
      Runtime: python3.11
      Handler: script_handler
      Script: |
        def script_handler(events, context):
            import boto3
            from datetime import datetime, timezone

            print("Starting DeleteOldKeys function")

            iam = boto3.client('iam')
            username = events['UserName']
            weeks_threshold = int(events['WeeksThreshold'])
            deleted_keys = []

            print(f"Processing keys for user: {username}")

            # Get all access keys
            response = iam.list_access_keys(UserName=username)
            access_keys = response['AccessKeyMetadata']
            print(f"Found {len(access_keys)} keys to check")

            # Process each key
            for key in access_keys:
                key_id = key['AccessKeyId']
                print(f"Checking key: {key_id}")

                try:
                    # Check last usage
                    last_used_response = iam.get_access_key_last_used(AccessKeyId=key_id)
                    last_used = last_used_response['AccessKeyLastUsed'].get('LastUsedDate')

                    should_delete = False
                    if last_used:
                        weeks_since_use = (datetime.now(timezone.utc) - last_used).days / 7
                        print(f"Key {key_id} last used {weeks_since_use:.1f} weeks ago")
                        should_delete = weeks_since_use > weeks_threshold
                    else:
                        weeks_since_creation = (datetime.now(timezone.utc) - key['CreateDate']).days / 7
                        print(f"Key never used, created {weeks_since_creation:.1f} weeks ago")
                        should_delete = weeks_since_creation > weeks_threshold

                    if should_delete:
                        print(f"Deleting old key: {key_id}")
                        iam.delete_access_key(
                            UserName=username,
                            AccessKeyId=key_id
                        )
                        deleted_keys.append(key_id)
                        print(f"Successfully deleted key: {key_id}")

                except Exception as e:
                    print(f"Error processing key {key_id}: {str(e)}")
                    continue

            result = {
                'DeletedKeys': deleted_keys,
                'DeletedKeysCount': len(deleted_keys)
            }
            print(f"Final result: {result}")
            return result
      InputPayload:
        UserName: '{{ UserName }}'
        WeeksThreshold: '{{ WeeksThreshold }}'
    outputs:
      - Name: DeletedKeys
        Selector: $.DeletedKeys
        Type: StringList
      - Name: DeletedKeysCount
        Selector: $.DeletedKeysCount
        Type: Integer

outputs:
  - DeleteOldKeys.DeletedKeys
  - DeleteOldKeys.DeletedKeysCount
