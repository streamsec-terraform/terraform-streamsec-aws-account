schemaVersion: '0.3'
description: |
  This runbook sets the Lambda function to use reserved concurrency and then sets it to 0, effectively disabling execution. It verifies that the function is correctly throttled.
assumeRole: '{{ AutomationAssumeRole }}'
parameters:
  FunctionName:
    type: String
    description: (Required) The name or ARN of the Lambda function to disable.
  AutomationAssumeRole:
    type: AWS::IAM::Role::Arn
    description: (Optional) The ARN of the IAM role that allows Systems Manager Automation to perform actions on your behalf.
    default: ''
  Region:
    type: String
    description: (Required) The AWS region in which the Lambda function is located.
mainSteps:
  - description: Enable reserved concurrency mode for the Lambda function.
    name: SetReservedConcurrencyMode
    action: aws:executeScript
    nextStep: DisableLambdaConcurrency
    isEnd: false
    onFailure: Abort
    inputs:
      Runtime: python3.11
      Handler: script_handler
      InputPayload:
        FunctionName: '{{ FunctionName }}'
        Region: '{{ Region }}'
      Script: |
        import boto3
        from botocore.exceptions import ClientError

        def script_handler(event, context):
            function_name = event['FunctionName']
            region = event['Region']
            lambda_client = boto3.client('lambda', region_name=region)
            try:
                lambda_client.put_function_concurrency(
                    FunctionName=function_name,
                    ReservedConcurrentExecutions=1
                )
                return {"status": "SUCCESS", "message": f"Reserved concurrency set to 1 for {function_name} in region {region}."}
            except ClientError as e:
                raise Exception(f"Failed to set reserved concurrency for Lambda function '{function_name}', handled exception: {str(e)}")
  - description: Set the Lambda function reserved concurrency to 0 to disable execution.
    name: DisableLambdaConcurrency
    action: aws:executeScript
    nextStep: VerifyConcurrencyDisabled
    isEnd: false
    onFailure: Abort
    inputs:
      Runtime: python3.11
      Handler: script_handler
      InputPayload:
        FunctionName: '{{ FunctionName }}'
        Region: '{{ Region }}'
      Script: |
        import boto3
        from botocore.exceptions import ClientError

        def script_handler(event, context):
            function_name = event['FunctionName']
            region = event['Region']
            lambda_client = boto3.client('lambda', region_name=region)
            try:
                lambda_client.put_function_concurrency(
                    FunctionName=function_name,
                    ReservedConcurrentExecutions=0
                )
                print(f"Reserved concurrency set to 0 for {function_name} in region {region}.")
            except ClientError as e:
                raise Exception(f"Failed to disable Lambda function '{function_name}', handled exception: {str(e)}")
  - description: Verify that the Lambda function's reserved concurrency has been set to 0.
    name: VerifyConcurrencyDisabled
    action: aws:executeScript
    isEnd: true
    onFailure: Abort
    inputs:
      Runtime: python3.11
      Handler: script_handler
      InputPayload:
        FunctionName: '{{ FunctionName }}'
        Region: '{{ Region }}'
      Script: |
        import boto3
        from botocore.exceptions import ClientError

        def script_handler(event, context):
            function_name = event['FunctionName']
            region = event['Region']
            lambda_client = boto3.client('lambda', region_name=region)
            try:
                response = lambda_client.get_function_concurrency(
                    FunctionName=function_name
                )
                concurrency = response.get("ReservedConcurrentExecutions", "UNKNOWN")
                return {"status": "SUCCESS", "FinalConcurrencyCheck": concurrency}
            except ClientError as e:
                raise Exception(f"Failed to verify concurrency settings for Lambda function '{function_name}', handled exception: {str(e)}")
    outputs:
      - Name: FinalConcurrencyCheck
        Selector: $.Payload.FinalConcurrencyCheck
        Type: Integer
outputs:
  - VerifyConcurrencyDisabled.FinalConcurrencyCheck
