schemaVersion: '0.3'
description: |
  This runbook detaches the current IAM role from the Lambda function and replaces it with a deny-all IAM role.

assumeRole: '{{ AutomationAssumeRole }}'

parameters:
  AutomationAssumeRole:
    type: String
    description: (Optional) The ARN of the role that allows Automation to perform actions on your behalf.
    default: ''
  LambdaFunctionName:
    type: String
    description: The name of the Lambda function.
  AccountId:
    type: String
    description: The account ID.
  Region:
    type: String
    description: The AWS region where the Lambda Function is deployed.

mainSteps:
  - name: CreateDenyAllRole
    action: aws:executeScript
    isEnd: false
    nextStep: AttachDenyAllRoleToLambda
    outputs:
      - Name: NewRoleArn
        Selector: $.Payload.RoleArn
        Type: String
    inputs:
      Runtime: python3.11
      Handler: main
      InputPayload:
        AccountId: '{{ AccountId }}'
        Region: '{{ Region }}'
        LambdaFunctionName: '{{ LambdaFunctionName }}'
      Script: |
        import boto3
        import json

        def main(events, context):
            iam = boto3.client('iam')
            role_name = "DenyAllStream"
            account_id = events['AccountId']
            region = events['Region']
            function_name = events['LambdaFunctionName']
            role_exist = False
            assume_role_policy = {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {"Service": "lambda.amazonaws.com"},
                  "Action": "sts:AssumeRole"
                }
              ]
            }

            try:
                response = iam.create_role(
                    RoleName=role_name,
                    AssumeRolePolicyDocument=json.dumps(assume_role_policy)
                )
            except iam.exceptions.EntityAlreadyExistsException:
                print(f"Role {role_name} already exists. Retrieving existing role details.")
                response = iam.get_role(RoleName=role_name)
                role_exist = True
                trust_policy = response['Role']['AssumeRolePolicyDocument']

                for stmt in trust_policy.get("Statement", []):
                    principal = stmt.get("Principal", {})
                    if stmt.get("Effect") == "Allow" and principal.get("Service") == "lambda.amazonaws.com":
                        break
                else:
                    trust_policy['Statement'].append({
                      "Effect": "Allow",
                      "Principal": {"Service": "lambda.amazonaws.com"},
                      "Action": "sts:AssumeRole"
                    })
                    iam.update_assume_role_policy(
                        RoleName=role_name,
                        PolicyDocument=json.dumps(trust_policy)
                    )
            if not role_exist:
                deny_policy = {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Deny",
                      "Action": "*",
                      "Resource": "*"
                    }
                  ]
                }

                iam.put_role_policy(
                    RoleName=role_name,
                    PolicyName="DenyAllPolicy",
                    PolicyDocument=json.dumps(deny_policy)
                )

            role_arn = f"arn:aws:iam::{account_id}:role/{role_name}"
            return {
              "RoleArn": role_arn
            }

  - name: AttachDenyAllRoleToLambda
    action: aws:executeScript
    isEnd: true
    inputs:
      Runtime: python3.11
      Handler: main
      InputPayload:
        LambdaFunctionName: '{{ LambdaFunctionName }}'
        Region: '{{ Region }}'
        NewRoleArn: '{{ CreateDenyAllRole.NewRoleArn }}'
      Script: |
        import boto3

        def main(events, context):
            region = events['Region']
            function_name = events['LambdaFunctionName']
            new_role_arn = events['NewRoleArn']

            lambda_client = boto3.client('lambda', region_name=region)
            print(f"Updating Lambda function {function_name} with new role {new_role_arn}")

            lambda_client.update_function_configuration(
                FunctionName=function_name,
                Role=new_role_arn
            )

            print("Deny-all role attached to Lambda function {function_name}")
