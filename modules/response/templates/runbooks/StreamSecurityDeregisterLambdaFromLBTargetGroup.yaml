schemaVersion: '0.3'
description: |
  Removes the Lambda function from an attached ALB/NLB target group to prevent traffic routing.
assumeRole: '{{ AutomationAssumeRole }}'

parameters:
  TargetGroupArn:
    type: String
    description: (Required) The ARN of the Load Balancer Target Group.
  FunctionArn:
    type: String
    description: (Required) ARN of the Lambda function to disable.
  AutomationAssumeRole:
    type: String
    description: (Optional) The ARN of the IAM role that allows Systems Manager Automation to perform actions on your behalf.
    default: ''
  Region:
    type: String
    description: (Required) The AWS region where the Target Group exists.

mainSteps:
  - description: Remove the Lambda function from the Target Group.
    name: DeregisterLambdaFromTargetGroup
    action: aws:executeScript
    isEnd: true
    onFailure: Abort
    inputs:
      Runtime: python3.11
      Handler: script_handler
      InputPayload:
        TargetGroupArn: '{{ TargetGroupArn }}'
        FunctionArn: '{{ FunctionArn }}'
        Region: '{{ Region }}'
      Script: |
        import boto3
        from botocore.exceptions import ClientError

        def script_handler(event, context):
            try:
                target_group_arn = event.get('TargetGroupArn')
                function_arn = event.get('FunctionArn')
                region = event.get('Region')

                if not target_group_arn:
                    raise ValueError("FAILURE: TargetGroupArn parameter is missing.")
                if not function_arn:
                    raise ValueError("FAILURE: FunctionArn parameter is missing.")
                if not region:
                    raise ValueError("FAILURE: Region parameter is missing.")

                session = boto3.Session()
                elb_client = session.client('elbv2', region_name=region)

                try:
                    response = elb_client.describe_target_health(TargetGroupArn=target_group_arn)
                    registered_targets = [t['Target']['Id'] for t in response.get('TargetHealthDescriptions', [])]

                    if function_arn not in registered_targets:
                        raise ValueError(f"FAILURE: Lambda function {function_arn} is NOT registered in Target Group {target_group_arn}, no action needed.")

                except ClientError as e:
                    raise Exception(f"FAILURE: Unexpected error: {str(e)}")

                try:
                    elb_client.deregister_targets(
                        TargetGroupArn=target_group_arn,
                        Targets=[{'Id': function_arn}]
                    )
                except ClientError as e:
                    raise RuntimeError(f"FAILURE: Unable to deregister Lambda function {function_arn} from Target Group {target_group_arn}: {str(e)}")

                try:
                    response = elb_client.describe_target_health(TargetGroupArn=target_group_arn)
                    registered_targets = [t['Target']['Id'] for t in response.get('TargetHealthDescriptions', [])]

                    if function_arn in registered_targets:
                        raise RuntimeError(f"FAILURE: Lambda function {function_arn} was NOT successfully removed from Target Group {target_group_arn}.")

                except ClientError as e:
                    raise Exception(f"FAILURE: Unexpected error: {str(e)}")

                print(f"Lambda function {function_arn} was successfully removed from Target Group {target_group_arn} in {region}.")

            except Exception as e:
                raise Exception(f"Unexpected error encountered while removing Lambda function  from Target Group, handled exception: {str(e)}")
