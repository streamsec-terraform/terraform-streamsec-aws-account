schemaVersion: '0.3'
description: |
  Stops an ECS Service by setting the desired count to 0 and verifies that no tasks remain running.
assumeRole: '{{ AutomationAssumeRole }}'
parameters:
  ClusterArn:
    type: String
    description: (Required) The arn of the ECS cluster.
  ServiceName:
    type: String
    description: (Required) The name of the ECS service to stop.
  AutomationAssumeRole:
    type: AWS::IAM::Role::Arn
    description: (Optional) The ARN of the IAM role that allows Systems Manager Automation to perform actions on your behalf.
    default: ''
  Region:
    type: String
    description: (Required) The AWS region where the ECS cluster exists.
mainSteps:
  - description: Stop the ECS service by setting the desired count to 0.
    name: StopEcsService
    action: aws:executeScript
    nextStep: VerifyEcsServiceStopped
    isEnd: false
    onFailure: Abort
    inputs:
      Runtime: python3.11
      Handler: script_handler
      InputPayload:
        ClusterArn: '{{ ClusterArn }}'
        ServiceName: '{{ ServiceName }}'
        Region: '{{ Region }}'
      Script: |
        import boto3
        from botocore.exceptions import ClientError

        def script_handler(event, context):
            try:
                cluster_arn = event.get('ClusterArn')
                cluster_name = cluster_arn.split('/')[-1]
                service_name = event.get('ServiceName')
                region = event.get('Region')

                if not cluster_arn:
                    raise ValueError("cluster_arn parameter is missing.")
                if not service_name:
                    raise ValueError("service_name parameter is missing.")
                if not region:
                    raise ValueError("Region parameter is missing.")

                session = boto3.Session()
                ecs_client = session.client('ecs', region_name=region)

                try:
                    response = ecs_client.describe_services(
                        cluster=cluster_name,
                        services=[service_name]
                    )

                    if not response['services']:
                        raise ValueError(f"ECS service {service_name} does not exist in cluster {cluster_name}.")

                    current_desired_count = response['services'][0].get('desiredCount', -1)
                    if current_desired_count == 0:
                        raise ValueError(f"ECS service {service_name} already has desiredCount=0.")

                except Exception as e:
                    raise Exception(f"Unable to describe ECS service: {str(e)}")

                try:
                    ecs_client.update_service(
                        cluster=cluster_name,
                        service=service_name,
                        desiredCount=0
                    )
                except Exception as e:
                    raise RuntimeError(f"Unable to update ECS service {service_name} to desiredCount=0: {str(e)}")

            except Exception as e:
                raise Exception(f"Unable to update ECS service to desiredCount=0: {str(e)}")
  - description: Verify that the ECS service has 0 running tasks.
    name: VerifyEcsServiceStopped
    action: aws:executeScript
    isEnd: true
    onFailure: Abort
    inputs:
      Runtime: python3.11
      Handler: script_handler
      InputPayload:
        ClusterArn: '{{ ClusterArn }}'
        ServiceName: '{{ ServiceName }}'
        Region: '{{ Region }}'
      Script: |
        import boto3
        from botocore.exceptions import ClientError

        def script_handler(event, context):
            try:
                cluster_arn = event.get('ClusterArn')
                cluster_name = cluster_arn.split('/')[-1]
                service_name = event.get('ServiceName')
                region = event.get('Region')

                session = boto3.Session()
                ecs_client = session.client('ecs', region_name=region)

                try:
                    response = ecs_client.describe_services(
                        cluster=cluster_name,
                        services=[service_name]
                    )

                    if not response['services']:
                        raise ValueError(f"ECS service {service_name} does not exist in cluster {cluster_name}.")

                    running_count = response['services'][0].get('runningCount', 0)
                    if running_count > 0:
                        raise RuntimeError(f"ECS service {service_name} still has {running_count} running tasks.")

                except Exception as e:
                    raise Exception(f"Unable to verify ECS service status: {str(e)}")

                print(f"ECS service {service_name} successfully stopped in {cluster_name} (Region: {region}).")

            except Exception as e:
                raise Exception(f"Unable to verify ECS service status: {str(e)}")
