schemaVersion: '0.3'
description: >
  This runbook adds a "Deny All" policy to an IAM Role associated with an EC2 Instance Profile.
assumeRole: '{{ AutomationAssumeRole }}'
parameters:
  AutomationAssumeRole:
    type: String
    description: (Optional) ARN of the IAM Role that Automation will assume
    default: ""
  IamInstanceProfileArn:
    type: String
    description: (Required) The IAM Instance Profile Name.
  Region:
    type: String
    description: (Required) The AWS Region where the Instance Profile is located.

mainSteps:
  - name: GetInstanceProfile
    action: aws:executeScript
    nextStep: AttachDenyPolicy
    isEnd: false
    inputs:
      Runtime: python3.11
      Handler: main
      InputPayload:
        IamInstanceProfileArn: "{{ IamInstanceProfileArn }}"
        Region: "{{ Region }}"
      Script: |
        import boto3

        def main(events, context):
            iam = boto3.client('iam')
            profile_arn = events.get("IamInstanceProfileArn", "")
            profile_name = profile_arn.split("/")[-1]
            response = iam.get_instance_profile(InstanceProfileName=profile_name)
            if not response.get('InstanceProfile'):
              raise Exception(f"Instance profile '{profile_name}' was not found")
            role_name = response['InstanceProfile']['Roles'][0]['RoleName']

            return {"RoleName": role_name}


    outputs:
      - Name: Status
        Selector: $.Payload.Status
        Type: String
      - Name: RoleName
        Selector: $.Payload.RoleName
        Type: String

  - name: AttachDenyPolicy
    action: aws:executeScript
    isEnd: true
    inputs:
      Runtime: python3.11
      Handler: main
      InputPayload:
        RoleName: "{{ GetInstanceProfile.RoleName }}"
      Script: |
        import boto3
        import json

        def main(events, context):
            iam = boto3.client('iam')
            role_name = events.get("RoleName", "")

            deny_all_policy = {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Deny",
                        "Action": "*",
                        "Resource": "*"
                    }
                ]
            }

            iam.put_role_policy(
                RoleName=role_name,
                PolicyName="DenyAllStream",
                PolicyDocument=json.dumps(deny_all_policy)
            )

            print(f"'Deny All' policy attached to {role_name}")
