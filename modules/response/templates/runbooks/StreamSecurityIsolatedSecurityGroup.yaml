schemaVersion: '0.3'
description: >
  This runbook creates an isolated Security Group (without any Inbound/Outbound rules)
  and attaches it to an EC2 instance.
assumeRole: '{{ AutomationAssumeRole }}'
parameters:
  AutomationAssumeRole:
    type: String
    description: (Optional) ARN of the IAM Role that Automation will assume.
    default: ""
  InstanceId:
    type: String
    description: (Required) The EC2 instance ID to which the Profile will be attached
  Region:
    type: String
    description: (Required) The AWS region in which the Target Group is located.
  VpcId:
    type: String
    description: (Required) The VPC ID in which to create the SG
mainSteps:
  - name: CreateSecurityGroup
    action: aws:executeScript
    nextStep: AttachSecurityGroupToInstance
    isEnd: false
    inputs:
      Runtime: python3.11
      Handler: main
      InputPayload:
        VpcId: "{{ VpcId }}"
        Region: "{{ Region }}"
      Script: |
        import boto3
        from botocore.exceptions import ClientError

        def main(events, context):
            region = events.get("Region", "")
            vpc_id = events.get("VpcId", "")
            ec2 = boto3.client('ec2', region_name=region)

            try:
              response = ec2.create_security_group(
                  GroupName="IsolatedSGStream",
                  Description="Security Group without Inbound/Outbound rules",
                  VpcId=vpc_id
              )
              sg_id = response['GroupId']

              response = ec2.revoke_security_group_egress(
                  GroupId=sg_id,
                  IpPermissions=[
                      {
                          'IpProtocol': '-1',
                          'IpRanges': [{'CidrIp': '0.0.0.0/0'}]
                      }
                  ]
              )

            except ClientError as e:
              if e.response['Error']['Code'] == 'InvalidGroup.Duplicate':
                 print(f"Security Group IsolatedSGStream already attached to VPC {vpc_id}. Retrieving existing security group details.")
                 existing_groups = ec2.describe_security_groups(
                    Filters=[
                        {"Name": "group-name", "Values": ["IsolatedSGStream"]},
                        {"Name": "vpc-id", "Values": [vpc_id]}
                    ]
                )
                 sg_id = existing_groups['SecurityGroups'][0]['GroupId']
              else:
                 raise

            return {"SecurityGroupId": sg_id}


    outputs:
      - Name: Status
        Selector: $.Payload.Status
        Type: String
      - Name: SecurityGroupId
        Selector: $.Payload.SecurityGroupId
        Type: String
      - Name: Message
        Selector: $.Payload.Message
        Type: String

  - name: AttachSecurityGroupToInstance
    action: aws:executeScript
    inputs:
      Runtime: python3.11
      Handler: main
      InputPayload:
        InstanceId: "{{ InstanceId }}"
        SecurityGroupId: "{{ CreateSecurityGroup.SecurityGroupId }}"
        Region: "{{ Region }}"
      Script: |
        import boto3
        import time

        def main(events, context):
            region = events.get("Region", "")
            instance_id = events.get("InstanceId", "")
            security_group_id = events.get("SecurityGroupId", "")
            ec2 = boto3.client('ec2', region_name=region)

            print(f"Attaching security group {security_group_id} to instance {instance_id} in region {region}")

            ec2.modify_instance_attribute(
                InstanceId=instance_id,
                Groups=[security_group_id]
            )
            time.sleep(5)

            response = ec2.describe_instances(InstanceIds=[instance_id])
            attached_groups = response['Reservations'][0]['Instances'][0]['SecurityGroups']
            attached_group_ids = [sg['GroupId'] for sg in attached_groups]

            if security_group_id in attached_group_ids:
                print(f"Security Group {security_group_id} successfully attached to {instance_id}")
            else:
                raise Exception(f"Security Group {security_group_id} is NOT attached to {instance_id}")
