schemaVersion: '0.3'
description: |
  This runbook revokes temporary security credentials for a specified IAM user

assumeRole: '{{ AutomationAssumeRole }}'
parameters:
  AutomationAssumeRole:
    type: String
    description: (Optional) The ARN of the role that allows Automation to perform the actions on your behalf.
    default: ''
  UserName:
    type: String
    description: The name of the IAM user whose temporary credentials should be revoked.

mainSteps:
  - name: GetUserDetails
    action: aws:executeScript
    outputs:
      - Name: AccessKeys
        Selector: $.Payload.AccessKeys
        Type: StringList
    inputs:
      Runtime: python3.11
      Handler: main
      InputPayload:
        UserName: '{{ UserName }}'
      Script: |
        import boto3

        def main(events, context):
            user_name = events.get("UserName")
            if not user_name:
                raise ValueError("UserName parameter is required.")

            iam = boto3.client('iam')
            response = iam.list_access_keys(UserName=user_name)
            access_keys = response.get("AccessKeyMetadata", [])

            if not access_keys:
                raise Exception(f"failed to get access keys for user {user_name}")
            Access_key_ids = []
            key_ids = [k["AccessKeyId"] for k in access_keys if "AccessKeyId" in k]
            return {"AccessKeys": key_ids}

  - name: DeleteAccessKeys
    action: aws:executeScript
    isEnd: true
    inputs:
      Runtime: python3.11
      Handler: main
      InputPayload:
        UserName: '{{ UserName }}'
        AccessKeys: '{{ GetUserDetails.AccessKeys }}'
      Script: |
        import boto3

        def main(events, context):
            user_name = events.get("UserName")
            access_keys = events.get("AccessKeys", [])

            iam = boto3.client('iam')
            for key_id in access_keys:
                iam.delete_access_key(UserName=user_name, AccessKeyId=key_id)

            print(f"Access keys for user '{user_name}' deleted successfully.")
