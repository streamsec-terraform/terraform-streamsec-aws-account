schemaVersion: '0.3'
description: |
  Attaches an inline deny-all policy to the specified IAM role in a given AWS region, preventing AWS API calls. Ensures that the policy was successfully applied and raises an error if it was not.
assumeRole: '{{AutomationAssumeRole}}'
parameters:
  AutomationAssumeRole:
    type: String
    description: (Optional) The ARN of the role that allows Automation to perform the actions on your behalf.
    default: ''
  IAMRoleArn:
    type: String
    description: The name of the IAM Role to attach the Deny-All policy.
  Region:
    type: String
    description: The AWS Region where the role is located.
mainSteps:
  - name: AttachDenyPolicy
    action: aws:executeScript
    isEnd: true
    inputs:
      Runtime: python3.11
      Handler: main
      InputPayload:
        IAMRoleArn: '{{ IAMRoleArn }}'
        Region: '{{ Region }}'
      Script: |
        import boto3
        import json

        def main(events, context):
            iam = boto3.client('iam')
            role_arn = events.get("IAMRoleArn", "")
            role_name = role_arn.split("/")[-1]
            if not role_name:
                raise ValueError("ERROR: 'IAMRoleName' parameter is required.")

            try:
                iam.get_role(RoleName=role_name)

                deny_all_policy_ecs = {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Deny",
                            "Action": "*",
                            "Resource": "*"
                        }
                    ]
                }

                iam.put_role_policy(
                    RoleName=role_name,
                    PolicyName="denyAllStream",
                    PolicyDocument=json.dumps(deny_all_policy_ecs)
                )

                try:
                    iam.get_role_policy(RoleName=role_name, PolicyName="denyAllStream")
                    print(f"'Deny-All' policy is attached to IAM Role '{role_name}'.")
                except iam.exceptions.NoSuchEntityException:
                    raise RuntimeError(f"ERROR: Policy 'denyAllStream' was NOT successfully attached to '{role_name}'.")

            except iam.exceptions.NoSuchEntityException:
                raise ValueError(f"ERROR: IAM Role '{role_name}' does not exist.")
            except Exception as e:
                raise RuntimeError(f"Unexpected error while attaching 'DenyAll' policy to IAM Role '{role_name}', handled exception: {str(e)}")
