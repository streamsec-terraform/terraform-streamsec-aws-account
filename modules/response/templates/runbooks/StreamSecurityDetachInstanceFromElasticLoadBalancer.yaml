schemaVersion: '0.3'
description: |
  Removes the selected EC2 instance from its associated load balancer target group. This immediately stops directing traffic to the instance while keeping it running..

assumeRole: '{{ AutomationAssumeRole }}'

parameters:
  AutomationAssumeRole:
    type: String
    description: (Required) The IAM role for Systems Manager Automation.
  InstanceID:
    type: String
    description: (Required) The EC2 Instance ID to check and deregister.
  LoadBalancerNames:
    type: StringList
    description: (Required) The EC2 Instance ID to check and deregister.
  Region:
    type: String
    description: (Required) The AWS region.

mainSteps:
  - name: CheckClassicLBRegistrations
    action: aws:executeScript
    nextStep: DeregisterInstanceFromCLB
    inputs:
      Runtime: python3.11
      Handler: main
      InputPayload:
        LoadBalancerNames: '{{ LoadBalancerNames }}'
        InstanceID: '{{ InstanceID }}'
        Region: '{{ Region }}'
      Script: |
        import boto3

        def main(events, context):
            region = events['Region']
            load_balancer_names = events["LoadBalancerNames"]
            instance_id = events['InstanceID']
            client = boto3.client('elb', region_name=region)
            load_balancer_names = [load_balancer_names] if isinstance(load_balancer_names, str) else load_balancer_names
            lbs = client.describe_load_balancers(LoadBalancerNames=load_balancer_names)
            associated_lbs = []

            for lb in lbs.get('LoadBalancerDescriptions', []):
                instances = [inst['InstanceId'] for inst in lb.get('Instances', [])]
                if instance_id in instances:
                    associated_lbs.append(lb['LoadBalancerName'])

            if associated_lbs:
                return {
                    "InstanceRegistered": True,
                    "LoadBalancerNames": associated_lbs
                }
            else:
                raise Exception(f"Instance {instance_id} is not registered with any Classic Load Balancer.")

    outputs:
      - Name: InstanceRegistered
        Selector: $.Payload.InstanceRegistered
        Type: Boolean
      - Name: LoadBalancerNames
        Selector: $.Payload.LoadBalancerNames
        Type: StringList

  - name: DeregisterInstanceFromCLB
    action: aws:executeScript
    isEnd: true
    inputs:
      Runtime: python3.11
      Handler: main
      InputPayload:
        InstanceID: '{{ InstanceID }}'
        Region: '{{ Region }}'
        InstanceRegistered: '{{ CheckClassicLBRegistrations.InstanceRegistered }}'
        LoadBalancerNames: '{{ CheckClassicLBRegistrations.LoadBalancerNames }}'
      Script: |
        import boto3
        import time

        def main(events, context):
            if not events.get("InstanceRegistered", False):
                raise Exception("Instance is not registered with any Classic Load Balancer.")

            region = events['Region']
            instance_id = events['InstanceID']
            lb_names = events['LoadBalancerNames']
            client = boto3.client('elb', region_name=region)

            success = []
            still_registered = []

            print(f"Deregistering {len(lb_names)} load balancer(s) from instance {instance_id}")

            for lb_name in lb_names:
                client.deregister_instances_from_load_balancer(
                    LoadBalancerName=lb_name,
                    Instances=[{'InstanceId': instance_id}]
                )

            time.sleep(60)

            print(f"Validating instance {instance_id} deregistration from load balancers {lb_names}")

            for lb_name in lb_names:
                resp = client.describe_load_balancers(LoadBalancerNames=[lb_name])
                instances = [inst['InstanceId'] for inst in resp['LoadBalancerDescriptions'][0]['Instances']]
                if instance_id in instances:
                    still_registered.append(lb_name)
                else:
                    success.append(lb_name)

            if success:
                print(f"Instance {instance_id} successfully deregistered from: {success}")

            if still_registered:
                raise Exception(f"Instance {instance_id} is still registered with: {still_registered}")
