schemaVersion: '0.3'
description: |
  Ensures the specified IAM access keys are deleted by verifying their existence, deleting them, and confirming their removal.
assumeRole: '{{ AutomationAssumeRole }}'
parameters:
  UserName:
    type: String
    description: (Required) IAM username whose access keys will be deleted.
  AccessKeyIds:
    type: StringList
    description: (Required) The list of access key IDs to delete.
  Region:
    type: String
    description: (Required) The AWS region of the IAM user.
  AutomationAssumeRole:
    type: AWS::IAM::Role::Arn
    description: (Optional) IAM role ARN for Systems Manager Automation.
    default: ''
mainSteps:
  - name: ValidateAndDeleteKeys
    action: aws:executeScript
    isEnd: true
    onFailure: Abort
    inputs:
      Runtime: python3.11
      Handler: script_handler
      InputPayload:
        UserName: '{{ UserName }}'
        AccessKeyIds: '{{ AccessKeyIds }}'
        Region: '{{ Region }}'
      Script: |
        import boto3
        def script_handler(event, context):
            user_name = event['UserName']
            access_key_ids = event['AccessKeyIds']
            region = event['Region']
            iam_client = boto3.client('iam', region_name=region)
            print(f"About to delete {len(access_key_ids)} access keys for user {user_name}.")
            for access_key_id in access_key_ids:
                try:
                    print(f"Deleting access key ID: {access_key_id} for user: {user_name}.")
                    iam_client.delete_access_key(UserName=user_name, AccessKeyId=access_key_id)
                    print(f"Access key id : {access_key_id} deleted successfully.")
                except Exception as e:
                    raise Exception(f"Failed to delete access key {access_key_id} for user {user_name}: {str(e)}")
