schemaVersion: '0.3'
description: |
  This runbook ensures that a VPC-connected AWS Lambda function has only an isolated security group named 'stream-deny'.
  It checks if 'stream-deny' exists in the given VPC, creates it if necessary,
  ensures the Lambda's execution role has the required VPC permissions,
  and then attaches the SG to the Lambda function while removing all other security groups.
assumeRole: '{{AutomationAssumeRole}}'
parameters:
  AutomationAssumeRole:
    type: String
    description: (Optional) The ARN of the role that allows Automation to perform the actions on your behalf.
    default: ''
  FunctionName:
    type: String
    description: (Required) The name or ARN of the AWS Lambda function.
  Region:
    type: String
    description: (Required) The AWS region where the Lambda function is located.
  VpcId:
    type: String
    description: (Required) The VPC ID where the Lambda function is deployed.
mainSteps:
  - name: EnsureStreamDenySecurityGroup
    action: aws:executeScript
    isEnd: true
    inputs:
      Runtime: python3.11
      Handler: main
      InputPayload:
        FunctionName: '{{ FunctionName }}'
        Region: '{{ Region }}'
        VpcId: '{{ VpcId }}'
      Script: |
        import boto3
        import json
        import time

        def main(events, context):
            try:
                region = events['Region']
                function_name = events['FunctionName']
                vpc_id = events['VpcId']
                sg_name = "stream-deny"

                ec2_client = boto3.client('ec2', region_name=region)
                lambda_client = boto3.client('lambda', region_name=region)
                iam_client = boto3.client('iam')

                # 1. Create or find the SG
                existing_sgs = ec2_client.describe_security_groups(Filters=[
                    {"Name": "vpc-id", "Values": [vpc_id]},
                    {"Name": "group-name", "Values": [sg_name]}
                ])['SecurityGroups']

                if existing_sgs:
                    isolated_sg_id = existing_sgs[0]['GroupId']
                    print(f"Found existing security group: {isolated_sg_id}")
                else:
                    sg_response = ec2_client.create_security_group(
                        Description='Isolated Security Group for Lambda',
                        GroupName=sg_name,
                        VpcId=vpc_id
                    )
                    isolated_sg_id = sg_response['GroupId']
                    print(f"Created new security group: {isolated_sg_id}")

                # 2. Check Lambda VPC config and execution role
                response = lambda_client.get_function_configuration(FunctionName=function_name)
                vpc_config = response.get('VpcConfig', {})
                subnet_ids = vpc_config.get('SubnetIds', [])
                if not subnet_ids:
                  print(f"Lambda '{function_name}' is not configured with VPC networking. Skipping security group update.")
                  return {
                      "Result": "Skipped",
                      "Reason": f"Lambda '{function_name}' is not attached to a VPC."
                  }
                role_arn = response['Role']
                role_name = role_arn.split('/')[-1]

                # 3. Ensure IAM permissions
                required_actions = [
                    "ec2:CreateNetworkInterface",
                    "ec2:DescribeNetworkInterfaces",
                    "ec2:DeleteNetworkInterface",
                    "ec2:DescribeSubnets",
                    "ec2:DescribeSecurityGroups",
                    "ec2:DescribeVpcs"
                ]

                inline_policies = iam_client.list_role_policies(RoleName=role_name)['PolicyNames']
                permission_exist = False

                for policy_name in inline_policies:
                    policy_doc = iam_client.get_role_policy(RoleName=role_name, PolicyName=policy_name)
                    statements = policy_doc['PolicyDocument'].get('Statement', [])
                    for stmt in statements:
                        actions = stmt.get('Action', [])
                        if isinstance(actions, str):
                            actions = [actions]
                        if "*" in actions or all(a in actions for a in required_actions):
                            permission_exist = True
                            break
                    if permission_exist:
                        break

                if not permission_exist:
                    policy_name = "AllowLambdaVpcAccess"
                    policy_doc = {
                        "Version": "2012-10-17",
                        "Statement": [
                            {
                                "Effect": "Allow",
                                "Action": required_actions,
                                "Resource": "*"
                            }
                        ]
                    }

                    iam_client.put_role_policy(
                        RoleName=role_name,
                        PolicyName=policy_name,
                        PolicyDocument=json.dumps(policy_doc)
                    )
                    print(f"Attached inline policy '{policy_name}' to role '{role_name}'")
                
                print("Waiting for IAM policy propagation...")
                time.sleep(15)
                # 4. Update Lambda config
                lambda_client.update_function_configuration(
                    FunctionName=function_name,
                    VpcConfig={
                        'SubnetIds': subnet_ids,
                        'SecurityGroupIds': [isolated_sg_id]
                    }
                )

                print(f"Lambda function '{function_name}' successfully updated to use only 'stream-deny' SG.")

            except Exception as e:
                raise Exception(f"Failed to attach Security Group to Lambda: {str(e)}")
