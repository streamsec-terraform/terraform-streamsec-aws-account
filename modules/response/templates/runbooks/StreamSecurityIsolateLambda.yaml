schemaVersion: '0.3'
description: |
  This runbook ensures that a VPC-connected AWS Lambda function has only an isolated security group named 'stream-deny'.
  It checks if 'stream-deny' exists in the given VPC, creates it if necessary, and then attaches it to the Lambda function while removing all other security groups.
assumeRole: '{{AutomationAssumeRole}}'
parameters:
  AutomationAssumeRole:
    type: String
    description: (Optional) The ARN of the role that allows Automation to perform the actions on your behalf.
    default: ''
  FunctionName:
    type: String
    description: (Required) The name or ARN of the AWS Lambda function.
  Region:
    type: String
    description: (Required) The AWS region where the Lambda function is located.
  VpcId:
    type: String
    description: (Required) The VPC ID where the Lambda function is deployed.
mainSteps:
  - name: EnsureStreamDenySecurityGroup
    action: aws:executeScript
    isEnd: true
    inputs:
      Runtime: python3.11
      Handler: main
      InputPayload:
        FunctionName: '{{ FunctionName }}'
        Region: '{{ Region }}'
        VpcId: '{{ VpcId }}'
      Script: |
        import boto3

        def main(events, context):
            try:
                ec2_client = boto3.client('ec2', region_name=events['Region'])
                lambda_client = boto3.client('lambda', region_name=events['Region'])

                function_name = events['FunctionName']
                vpc_id = events['VpcId']
                sg_name = "stream-deny"

                existing_sgs = ec2_client.describe_security_groups(Filters=[
                    {"Name": "vpc-id", "Values": [vpc_id]},
                    {"Name": "group-name", "Values": [sg_name]}
                ])['SecurityGroups']

                if existing_sgs:
                    isolated_sg_id = existing_sgs[0]['GroupId']
                else:
                    sg_response = ec2_client.create_security_group(
                        Description='Isolated Security Group for Lambda',
                        GroupName=sg_name,
                        VpcId=vpc_id
                    )
                    isolated_sg_id = sg_response['GroupId']

                response = lambda_client.get_function_configuration(FunctionName=function_name)
                vpc_config = response.get('VpcConfig', {})
                subnet_ids = vpc_config.get('SubnetIds', [])
                security_groups = vpc_config.get('SecurityGroupIds', [])

                lambda_client.update_function_configuration(
                    FunctionName=function_name,
                    VpcConfig={
                        'SubnetIds': subnet_ids,
                        'SecurityGroupIds': [isolated_sg_id]
                    }
                )

                print(f"Lambda function '{function_name}' successfully updated. Now using only security group stream-deny")

            except Exception as e:
                raise Exception(f"Failed to attach Security Group to Lambda: {str(e)}")
