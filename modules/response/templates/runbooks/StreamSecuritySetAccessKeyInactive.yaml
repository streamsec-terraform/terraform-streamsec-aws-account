schemaVersion: '0.3'
description: |
  Sets an IAM userâ€™s access keys to an inactive state without immediate deletion.
  Prevents usage of compromised API keys while allowing potential reactivation later.
assumeRole: '{{ AutomationAssumeRole }}'
parameters:
  UserName:
    type: String
    description: (Required) The name of the IAM user.
  AccessKeyIds:
    type: StringList
    description: (Required) The list of access key IDs to deactivate.
  Region:
    type: String
    description: (Required) The AWS region.
  AutomationAssumeRole:
    type: AWS::IAM::Role::Arn
    description: (Optional) The ARN of the IAM role that allows Systems Manager Automation to perform actions on your behalf.
    default: ''
mainSteps:
  - name: DeactivateAccessKeys
    action: aws:executeScript
    isEnd: true
    inputs:
      Runtime: python3.11
      Handler: script_handler
      InputPayload:
        UserName: '{{ UserName }}'
        AccessKeyIds: '{{ AccessKeyIds }}'
        Region: '{{ Region }}'
      Script: |
        import boto3
        from botocore.exceptions import ClientError

        def script_handler(event, context):
            user_name = event['UserName']
            access_key_ids = event['AccessKeyIds']
            region = event['Region']
            iam = boto3.client('iam', region_name=region)
            print(f"Starting deactivation of {len(access_key_ids)} access keys for user: {user_name}")
            for access_key_id in access_key_ids:
                try:
                    print(f"Deactivating access key: {access_key_id}")
                    iam.update_access_key(UserName=user_name, AccessKeyId=access_key_id, Status='Inactive')
                    print(f"Access key {access_key_id} for user {user_name} is now Inactive.")
                except Exception as e:
                    raise Exception(f"Failed to deactivate access key '{access_key_id}' for user '{user_name}', handled exception: {str(e)}")
