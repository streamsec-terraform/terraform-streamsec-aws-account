schemaVersion: '0.3'
description: |
  This runbook retrieves all attached EBS volumes for an EC2 instance and creates a snapshot for each volume.
assumeRole: '{{ AutomationAssumeRole }}'
parameters:
  InstanceID:
    type: String
    description: (Required) The EC2 instance ID for which snapshots of attached EBS volumes will be created.
  AutomationAssumeRole:
    type: AWS::IAM::Role::Arn
    description: (Optional) The ARN of the IAM role that allows Systems Manager Automation to perform actions on your behalf.
    default: ''
  Region:
    type: String
    description: (Required) The AWS region in which the EC2 instance is located.
mainSteps:
  - name: DescribeInstances
    action: aws:executeAwsApi
    nextStep: ExtractVolumes
    isEnd: false
    onFailure: Abort
    inputs:
      Service: ec2
      Api: DescribeInstances
      InstanceIds:
        - '{{ InstanceID }}'
    outputs:
      - Type: MapList
        Name: VolumeMappings
        Selector: $.Reservations[0].Instances[0].BlockDeviceMappings
  - description: Extract EBS Volume IDs from BlockDeviceMappings.
    name: ExtractVolumes
    action: aws:executeScript
    nextStep: Loop
    isEnd: false
    onFailure: Abort
    inputs:
      Runtime: python3.11
      Handler: script_handler
      InputPayload:
        VolumeMappings: '{{ DescribeInstances.VolumeMappings }}'
      Script: |
        def script_handler(event, context):
            mappings = event.get('VolumeMappings', [])
            volumes = [entry['Ebs']['VolumeId'] for entry in mappings if 'Ebs' in entry]
            if not volumes:
                raise ValueError("FAILURE: No EBS volumes attached to the instance.")
            print(f"Extracted EBS Volume IDs: {volumes}")
            return {"VolumeIds": volumes}
    outputs:
      - Name: VolumeIds
        Selector: $.Payload.VolumeIds
        Type: StringList
  - name: Loop
    action: aws:loop
    isEnd: true
    onFailure: Abort
    inputs:
      Iterators: '{{ ExtractVolumes.VolumeIds }}'
      Steps:
        - description: Create a snapshot for each volume.
          name: CreateSnapshot
          action: aws:executeScript
          isEnd: true
          onFailure: Abort
          inputs:
            Runtime: python3.11
            Handler: script_handler
            InputPayload:
              VolumeId: '{{ Loop.CurrentIteratorValue }}'
              Region: '{{ Region }}'
            Script: |
              import boto3
              from botocore.exceptions import ClientError

              def script_handler(event, context):
                  volume_id = event.get('VolumeId')
                  region = event.get('Region')

                  try:
                      ec2_client = boto3.client('ec2', region_name=region)
                      response = ec2_client.create_snapshot(VolumeId=volume_id)
                      print(f"Snapshot created for volume {volume_id}.")
                      return {
                          "SnapshotId": response['SnapshotId']
                      }
                  except ClientError as e:
                      raise Exception(f"Failed to create snapshot for volume {volume_id}, handled exception: {str(e)}")
          outputs:
            - Name: SnapshotId
              Selector: $.Payload.SnapshotId
              Type: String
            - Name: StartTime
              Selector: $.Payload.StartTime
              Type: String
