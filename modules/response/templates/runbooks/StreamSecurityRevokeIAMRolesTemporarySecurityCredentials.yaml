schemaVersion: '0.3'
description: |
  Revokes all active temporary security credentials issued from the specified IAM role(s). This immediately invalidates
  any current sessions for external or internal entities using those credentials

assumeRole: '{{ AutomationAssumeRole }}'

parameters:
  AutomationAssumeRole:
    type: String
    description: (Optional) The ARN of the role that allows Automation to perform actions on your behalf.
    default: ''
  RoleNames:
    type: StringList
    description: A list of IAM role names to attach the deny policy to.

mainSteps:
  - name: AttachRevokeDenyPolicyToRoles
    action: aws:executeScript
    isEnd: true
    inputs:
      Runtime: python3.11
      Handler: main
      InputPayload:
        RoleNames: '{{ RoleNames }}'
      Script: |
        import boto3
        import json
        from datetime import datetime, timezone

        def main(events, context):
            iam = boto3.client('iam')
            roles = events.get('RoleNames', [])
            now = datetime.utcnow().replace(microsecond=0).isoformat() + 'Z'

            deny_policy = {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Deny",
                  "Action": "*",
                  "Resource": "*",
                  "Condition": {
                    "DateLessThan": {
                      "aws:TokenIssueTime": now
                    }
                  }
                }
              ]
            }
            print(f"Attaching revoke policy to {len(roles)} IAM roles.")

            role_names = []
            for role_name in roles:

                iam.put_role_policy(
                    RoleName=role_name,
                    PolicyName="OlderSessionsDenyPolicyStream",
                    PolicyDocument=json.dumps(deny_policy)
                )
                role_names.append(role_name)
            print(f"Attached revoke deny policy to the following roles: {role_names}")
