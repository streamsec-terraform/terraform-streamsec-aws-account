schemaVersion: '0.3'
assumeRole: '{{ AutomationAssumeRole }}'
description: >-
  Remove inbound rules for a specific port in a security group if open to 0.0.0.0/0,
  split ranges as needed.
parameters:
  AutomationAssumeRole:
    type: String
    description: >-
      The IAM role that allows Systems Manager Automation to perform the actions on your behalf.
  Region:
    type: String
    description: The AWS region where the security group exists.
  SecurityGroupId:
    type: String
    description: The ID of the security group.
  Port:
    type: String
    description: The port number to remove (single port, not a range).

mainSteps:
  - name: removeSecurityGroupRule
    action: 'aws:executeScript'
    inputs:
      Runtime: python3.11
      Handler: script_handler
      Script: |
        import boto3
        from botocore.exceptions import ClientError

        def remove_port_from_sg_rule(security_group_id, port, region):
            ec2 = boto3.client('ec2', region_name=region)

            try:
                # Describe security group to get inbound rules
                sg = ec2.describe_security_groups(GroupIds=[security_group_id])['SecurityGroups'][0]
                inbound_rules = sg.get('IpPermissions', [])
            except ClientError as e:
                if e.response['Error']['Code'] == 'InvalidGroup.NotFound':
                    raise ValueError(f"FAILURE: Security Group {security_group_id} not found in region {region}.")
                raise RuntimeError(f"FAILURE: Unable to retrieve security group {security_group_id}: {str(e)}")

            try:
                for rule in inbound_rules:
                    protocol = rule.get('IpProtocol')
                    from_port = rule.get('FromPort')
                    to_port = rule.get('ToPort')
                    ip_ranges = rule.get('IpRanges', [])

                    # Check if the rule applies to the specified port and is open to 0.0.0.0/0
                    if protocol in ['tcp', 'udp'] and from_port <= port <= to_port:
                        for ip_range in ip_ranges:
                            if ip_range.get('CidrIp') == '0.0.0.0/0':
                                # Remove the existing rule
                                try:
                                    ec2.revoke_security_group_ingress(
                                        GroupId=security_group_id,
                                        IpPermissions=[{
                                            'IpProtocol': protocol,
                                            'FromPort': from_port,
                                            'ToPort': to_port,
                                            'IpRanges': [{'CidrIp': '0.0.0.0/0'}]
                                        }]
                                    )
                                except ClientError as e:
                                    raise RuntimeError(f"FAILURE: Unable to revoke rule {protocol} {from_port}-{to_port}: {str(e)}")

                                # Add new rules for ranges excluding the specified port
                                new_rules = []
                                if from_port < port:
                                    new_rules.append({
                                        'IpProtocol': protocol,
                                        'FromPort': from_port,
                                        'ToPort': port - 1,
                                        'IpRanges': [{'CidrIp': '0.0.0.0/0'}]
                                    })
                                if port < to_port:
                                    new_rules.append({
                                        'IpProtocol': protocol,
                                        'FromPort': port + 1,
                                        'ToPort': to_port,
                                        'IpRanges': [{'CidrIp': '0.0.0.0/0'}]
                                    })

                                if new_rules:
                                    try:
                                        ec2.authorize_security_group_ingress(
                                            GroupId=security_group_id,
                                            IpPermissions=new_rules
                                        )
                                    except ClientError as e:
                                        raise RuntimeError(f"FAILURE: Unable to authorize new security group rules: {str(e)}")

            except Exception as e:
                raise RuntimeError(f"FAILURE: Unexpected error occurred: {str(e)}")

        def script_handler(event, context):
            try:
                region = event['Region']
                security_group_id = event['SecurityGroupId']
                port = int(event['Port'])

                remove_port_from_sg_rule(security_group_id, port, region)
            except KeyError as e:
                raise ValueError(f"FAILURE: Missing required parameter: {str(e)}")
            except Exception as e:
                raise RuntimeError(f"FAILURE: Unexpected error in script_handler: {str(e)}")

      InputPayload:
        Region: "{{Region}}"
        SecurityGroupId: "{{SecurityGroupId}}"
        Port: "{{Port}}"
    outputs:
      - Name: output
        Selector: $.Payload
        Type: String
