schemaVersion: '0.3'
description: >
  This runbook creates an isolated Security Group (without any Inbound/Outbound rules)
  and attaches it to an EC2 instance.
assumeRole: '{{ AutomationAssumeRole }}'
parameters:
  AutomationAssumeRole:
    type: String
    description: (Optional) ARN of the IAM Role that Automation will assume.
    default: ""
  InstanceId:
    type: String
    description: (Required) The EC2 instance ID to which the Profile will be attached
  Region:
    type: String
    description: (Required) The AWS region in which the Target Group is located.
mainSteps:
  - name: DescribeIamInstanceProfileAssociations
    action: aws:executeScript
    nextStep : DisassociateIamInstanceProfile
    isEnd: false
    inputs:
      Runtime: python3.11
      Handler: main
      InputPayload:
        InstanceId: "{{ InstanceId }}"
        Region: "{{ Region }}"
      Script: |
        import boto3

        def main(events, context):
            region = events.get("Region", "")
            instance_id = events.get("InstanceId", "")
            ec2 = boto3.client('ec2', region_name=region)


            response = ec2.describe_iam_instance_profile_associations(
                Filters=[
                    {
                        'Name': 'instance-id',
                        'Values': [instance_id]
                    }
                ]
            )
            associations = response.get('IamInstanceProfileAssociations', [])
            if not associations:
                raise Exception(f"No IAM instance profile associations found for instance: {instance_id}")

            association_id = associations[0]['AssociationId']
            return {"AssociationId": association_id}

    outputs:
      - Name: Status
        Selector: $.Payload.Status
        Type: String
      - Name: AssociationId
        Selector: $.Payload.AssociationId
        Type: String
      - Name: Message
        Selector: $.Payload.Message
        Type: String

  - name: DisassociateIamInstanceProfile
    action: aws:executeScript
    inputs:
      Runtime: python3.11
      Handler: main
      InputPayload:
        AssociationId: "{{ DescribeIamInstanceProfileAssociations.AssociationId }}"
      Script: |
        import boto3

        def main(events, context):
            association_id = events.get("AssociationId", "")
            ec2 = boto3.client('ec2')

            response = ec2.disassociate_iam_instance_profile(
                AssociationId=association_id
            )
            print( f"Disassociated IAM instance profile with Association ID: {association_id}")
